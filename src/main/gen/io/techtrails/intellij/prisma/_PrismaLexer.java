/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.techtrails.intellij.prisma;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.techtrails.intellij.prisma.psi.PrismaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>PrismaLexer.flex</tt>
 */
public class _PrismaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_DEF_KEYWORD = 2;
  public static final int AFTER_BLOCK_NAME = 4;
  public static final int AFTER_FIELD_NAME = 6;
  public static final int BEFORE_FIELD_VALUE = 8;
  public static final int STRING_FIELD_VALUE = 10;
  public static final int DATASOURCE_FIELDS = 12;
  public static final int DATASOURCE_PROVIDER_VALUE = 14;
  public static final int GENERATOR_FIELDS = 16;
  public static final int MODEL_FIELDS = 18;
  public static final int ENUM_FIELDS = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  8,  8,  8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\3\14\0\1\15\12\14\3\0\1\32\3\0\32\10\4\0\1\14"+
    "\1\0\1\11\1\10\1\20\1\16\1\7\1\10\1\21\1\10\1\27\2\10\1\12\1\23\1\22\1\17"+
    "\1\25\1\31\1\5\1\13\1\4\1\6\1\26\2\10\1\30\1\10\1\24\1\0\1\33\7\0\1\1\32\0"+
    "\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\5\1\1\3\1\4\1\5\1\6"+
    "\2\1\1\7\1\1\1\0\1\10\11\0\1\10\1\11"+
    "\3\0\1\12\4\0\1\13\26\0\1\14\3\0\1\15"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304"+
    "\0\340\0\374\0\u0118\0\u0134\0\u0150\0\u016c\0\u0188\0\u01a4"+
    "\0\u01c0\0\374\0\374\0\u01dc\0\u01f8\0\u0214\0\374\0\u0230"+
    "\0\u024c\0\u0268\0\u0284\0\u02a0\0\u02bc\0\u02d8\0\u02f4\0\u0310"+
    "\0\u032c\0\u0348\0\u0364\0\u0380\0\u039c\0\u03b8\0\u03d4\0\u03f0"+
    "\0\374\0\u040c\0\u0428\0\u0444\0\u0460\0\374\0\u047c\0\u0498"+
    "\0\u04b4\0\u04d0\0\u04ec\0\u0508\0\u0524\0\u0540\0\u055c\0\u0578"+
    "\0\u0594\0\u05b0\0\u05cc\0\u05e8\0\u0604\0\u0620\0\u063c\0\u0658"+
    "\0\u0674\0\u0690\0\u06ac\0\u06c8\0\374\0\u06e4\0\u0700\0\u071c"+
    "\0\374\0\u0738";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\4\12\1\14\5\12\1\15\1\16\2\12"+
    "\1\17\1\12\1\20\11\12\2\13\1\12\10\21\2\12"+
    "\6\21\1\12\5\21\3\12\2\13\21\12\1\22\10\12"+
    "\2\13\27\12\1\23\2\12\2\24\66\12\2\13\3\12"+
    "\1\25\6\12\1\15\7\12\1\26\5\12\1\27\3\12"+
    "\1\30\31\12\2\13\12\12\1\15\15\12\1\27\35\0"+
    "\2\13\53\0\1\31\26\0\1\32\27\0\1\33\31\0"+
    "\1\34\43\0\1\35\20\0\11\21\1\0\6\21\1\0"+
    "\5\21\3\0\2\24\36\0\1\36\33\0\1\37\41\0"+
    "\1\40\7\0\1\41\1\0\1\42\14\0\1\43\25\0"+
    "\1\44\1\0\13\44\1\45\16\44\4\0\1\46\51\0"+
    "\1\47\27\0\1\50\27\0\1\51\40\0\1\52\45\0"+
    "\1\53\32\0\1\54\22\0\1\55\37\0\1\56\10\0"+
    "\1\44\1\0\32\44\1\45\1\0\32\45\11\0\1\57"+
    "\31\0\1\60\33\0\1\61\52\0\1\62\17\0\1\63"+
    "\34\0\1\64\33\0\1\65\33\0\1\66\25\0\1\67"+
    "\40\0\1\56\50\0\1\70\33\0\1\71\35\0\1\72"+
    "\6\0\1\73\46\0\1\74\25\0\1\75\40\0\1\76"+
    "\21\0\1\77\41\0\1\100\42\0\1\101\20\0\1\102"+
    "\31\0\1\103\36\0\1\104\33\0\1\100\27\0\1\105"+
    "\35\0\1\106\33\0\1\107\45\0\1\110\21\0\1\111"+
    "\35\0\1\54\44\0\1\112\20\0\1\56\35\0\1\56"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1876];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\7\1\2\11\3\1\1\11\1\1\1\0"+
    "\1\1\11\0\2\1\3\0\1\11\4\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    IElementType currentBlock = null;
    public IElementType currentBlockForKeyword(String keyword) {
        if (keyword == "datasource") {
            return DATASOURCE_BLOCK;
        } else if (keyword == "generator") {
            return GENERATOR_BLOCK;
        } else if (keyword == "model") {
            return MODEL_BLOCK;
        } else if (keyword == "enum") {
            return ENUM_BLOCK;
        }

        return null;
    }

    public IElementType blockKeywordToken(String keyword) {
        if (keyword == "datasource") {
            return KEYWORD_DATASOURCE;
        } else if (keyword == "generator") {
            return KEYWORD_GENERATOR;
        } else if (keyword == "model") {
            return KEYWORD_MODEL;
        } else if (keyword == "enum") {
            return KEYWORD_ENUM;
        }

        return null;
    }

    public int fieldsStateForBlock(IElementType block) {
        if (block == DATASOURCE_BLOCK) {
            return DATASOURCE_FIELDS;
        } else if (block == GENERATOR_BLOCK) {
            return GENERATOR_FIELDS;
        } else if (block == MODEL_BLOCK) {
            return MODEL_FIELDS;
        } else if (block == ENUM_BLOCK) {
            return ENUM_FIELDS;
        }

        return 0;
    }

    int fieldValueState = 0;

    public _PrismaLexer() {
        this((java.io.Reader)null);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PrismaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 14: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 15: break;
          case 3: 
            { yybegin(AFTER_BLOCK_NAME); return ENTITY_NAME;
            } 
            // fall through
          case 16: break;
          case 4: 
            { yybegin(fieldsStateForBlock(currentBlock)); return L_CURLY;
            } 
            // fall through
          case 17: break;
          case 5: 
            { yybegin(BEFORE_FIELD_VALUE); return EQ;
            } 
            // fall through
          case 18: break;
          case 6: 
            { yybegin(fieldValueState); return WHITE_SPACE;
            } 
            // fall through
          case 19: break;
          case 7: 
            { yybegin(YYINITIAL); currentBlock = null; return R_CURLY;
            } 
            // fall through
          case 20: break;
          case 8: 
            { return DOUBLE_COMMENT;
            } 
            // fall through
          case 21: break;
          case 9: 
            { return TRIPLE_COMMENT;
            } 
            // fall through
          case 22: break;
          case 10: 
            { yybegin(AFTER_FIELD_NAME); fieldValueState = STRING_FIELD_VALUE; return ENTITY_NAME;
            } 
            // fall through
          case 23: break;
          case 11: 
            { yybegin(BLOCK_DEF_KEYWORD);
          currentBlock = currentBlockForKeyword(yytext().toString());
          return blockKeywordToken(yytext().toString());
            } 
            // fall through
          case 24: break;
          case 12: 
            { yybegin(DATASOURCE_FIELDS); return STRING;
            } 
            // fall through
          case 25: break;
          case 13: 
            { yybegin(AFTER_FIELD_NAME); fieldValueState = DATASOURCE_PROVIDER_VALUE; return ENTITY_NAME;
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
