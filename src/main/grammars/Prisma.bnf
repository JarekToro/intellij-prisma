{
    parserClass = "io.techtrails.intellij.prisma.PrismaParser"
    parserUtilClass="io.techtrails.intellij.prisma.PrismaParserUtil"
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Prisma"
    psiImplClassSuffix = "Impl"
    psiPackage = "io.techtrails.intellij.prisma.psi"
    psiImplPackage = "io.techtrails.intellij.prisma.psi.impl"

    elementTypeHolderClass = "io.techtrails.intellij.prisma.psi.PrismaTypes"
    elementTypeClass = "io.techtrails.intellij.prisma.psi.PrismaElementType"
    tokenTypeClass = "io.techtrails.intellij.prisma.psi.PrismaTokenType"

    psiImplUtilClass = "io.techtrails.intellij.prisma.psi.impl.PrismaPsiImplUtil"

    extends('.*-block') = block

    tokens = [
        EOL = "regexp:\r|\n|\r\n"
        WHITE_SPACE = "regexp:[\t ]+"

        STRING = "regexp:\"[\w/._%@:?=-]*\""
        BOOLEAN = 'regexp:(true|false)'
        NUMBER = 'regexp:((0[xX][0-9a-fA-F]*)|(\\+|-)?\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))([eE](\\+|-)?[0-9]+)?)([LlFfUuDdg]|UL|ul)?\\b'

        L_CURLY = '{'
        R_CURLY = '}'
        L_BRACKET = '['
        R_BRACKET = ']'
        L_PAREN = '('
        R_PAREN = ')'
        COMMA = ','
        EQ = '='
        QUESTION_MARK = '?'
        COLON = ':'

        TRIPLE_COMMENT = 'regexp:///.*'
        DOUBLE_COMMENT = 'regexp://.*'

        KEYWORD_DATASOURCE = 'datasource'
        KEYWORD_GENERATOR = 'generator'
        KEYWORD_MODEL = 'model'
        KEYWORD_ENUM = 'enum'

        FIELD_PROVIDER = 'provider'
        FIELD_URL = 'url'
        FIELD_OUTPUT = 'output'

        MODEL_BLOCK_ATTRIBUTE_NAME = 'regexp:@@[a-z]+'
        MODEL_FIELD_ATTRIBUTE_NAME = 'regexp:@[a-z]+'

        ENTITY_NAME = 'regexp:[A-Za-z]\w*'
        BLOCK_NAME = 'regexp:[A-Za-z]\w*'
        MODEL_TYPE_NAME = 'regexp:[A-Za-z]\w*(\[]|\?)?'
        FUNCTION_CALL = 'regexp:[a-z]+\s*(?:\()'
    ]
}

prisma-schema ::= root-item *
private root-item ::= !<<eof>> block | comment | EOL

private comment ::= (TRIPLE_COMMENT | DOUBLE_COMMENT)

private field-value ::= scalar-value | array | env-var-value
private scalar-value ::= NUMBER | BOOLEAN | STRING
private array ::= '[' (field-value (',' field-value)*)? ']' { pin(".*")=1 }
private string-or-env ::= STRING | env-var-value
private env-var-value ::= 'env' '(' STRING ')'


block               ::= datasource-block | generator-block | model-block | enum-block
datasource-block    ::= 'datasource'    BLOCK_NAME '{' EOL? ((datasource-block-statement comment? EOL)  | comment | EOL)* '}' { pin=1 }
generator-block     ::= 'generator'     BLOCK_NAME '{' EOL? ((generator-block-statement comment? EOL)   | comment | EOL)* '}' { pin=1 }
model-block         ::= 'model'         BLOCK_NAME '{' EOL? ((model-block-statement comment? EOL)       | comment | EOL)* '}' { pin=1 }
enum-block          ::= 'enum'          BLOCK_NAME '{' EOL? ((enum-block-statement comment? EOL)        | comment | EOL)* '}' { pin=1 }

datasource-block-statement ::= ('provider' '=' STRING | 'url' '=' string-or-env) { pin(".*")=1 }

generator-block-statement ::= generator-block-field | generator-config-field
private generator-block-field ::= ('provider' '=' STRING | 'output' '=' string-or-env) { pin(".*")=1 }
private generator-config-field ::= ENTITY_NAME '=' field-value { pin=1 }

model-block-statement ::= model-field-definition | model-block-attribute
private model-field-definition ::= ENTITY_NAME model-field-type (model-field-attribute (EOL? model-field-attribute)*)? { pin=1 }
model-field-type ::= ENTITY_NAME model-type-modifier?
model-type-modifier ::= '?' | '[' + ']'

model-field-attribute ::= MODEL_FIELD_ATTRIBUTE_NAME model-attribute-params?
model-block-attribute ::= MODEL_BLOCK_ATTRIBUTE_NAME model-attribute-params?
private model-attribute-params ::= '(' model-attribute-param-name? model-attribute-param-value (',' model-attribute-param-name model-attribute-param-value)* ')' { pin(".*")=1 }
model-attribute-param-name ::= ENTITY_NAME ':'
model-attribute-param-value ::= model-attribute-param-value-scalar | model-attribute-param-value-array | model-function
private model-attribute-param-value-scalar ::= ENTITY_NAME | STRING | NUMBER | BOOLEAN
private model-attribute-param-value-array ::= '[' (model-attribute-param-value-scalar (',' model-attribute-param-value-scalar)*)? ']'
private model-function ::= FUNCTION_CALL '(' ')'

enum-block-statement ::= ENTITY_NAME ('=' STRING)? { pin(".*")=1 }
